
bin\Debug\2005673.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000002ec  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000040  00000000  00000000  000002ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007a  00000000  00000000  0000032f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000038a  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000242  00000000  00000000  00000733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f3  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIOConfig>:
* Name: GPIOConfig (pin, mode)
* Description: Configures the mode of the pin as INPUT/PULLUP or OUTPUT
* Arguments: pin and mode
* Returns: None
******************************************************************************/
void GPIOConfig(Pin,mode){
  90:	28 2f       	mov	r18, r24

        if(mode==1){
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	71 05       	cpc	r23, r1
  96:	81 f0       	breq	.+32     	; 0xb8 <GPIOConfig+0x28>
            SET_BIT(DDRD,Pin);
        }
        else{
            CLR_BIT(DDRD,Pin);
  98:	3a b1       	in	r19, 0x0a	; 10
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIOConfig+0x14>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIOConfig+0x10>
  a8:	28 2f       	mov	r18, r24
  aa:	20 95       	com	r18
  ac:	23 23       	and	r18, r19
  ae:	2a b9       	out	0x0a, r18	; 10
            SET_BIT(PORTD,Pin);
  b0:	2b b1       	in	r18, 0x0b	; 11
  b2:	82 2b       	or	r24, r18
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret
* Returns: None
******************************************************************************/
void GPIOConfig(Pin,mode){

        if(mode==1){
            SET_BIT(DDRD,Pin);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIOConfig+0x30>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	2a 95       	dec	r18
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIOConfig+0x2c>
  c4:	86 2b       	or	r24, r22
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <GPIOPinRead>:
* Returns: a
******************************************************************************/
int GPIOPinRead(Pin){


            uint8_t PIN_READ=PIND;
  ca:	29 b1       	in	r18, 0x09	; 9
            if(PIN_READ & (1<<Pin)){
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <GPIOPinRead+0xa>
  d0:	35 95       	asr	r19
  d2:	27 95       	ror	r18
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <GPIOPinRead+0x6>
  d8:	20 fd       	sbrc	r18, 0
  da:	09 c0       	rjmp	.+18     	; 0xee <GPIOPinRead+0x24>
                a=1;
            }
            else{
                a=0;
  dc:	10 92 01 01 	sts	0x0101, r1
  e0:	10 92 00 01 	sts	0x0100, r1
            }
    return a;
};
  e4:	80 91 00 01 	lds	r24, 0x0100
  e8:	90 91 01 01 	lds	r25, 0x0101
  ec:	08 95       	ret
int GPIOPinRead(Pin){


            uint8_t PIN_READ=PIND;
            if(PIN_READ & (1<<Pin)){
                a=1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 01 01 	sts	0x0101, r25
  f6:	80 93 00 01 	sts	0x0100, r24
            }
            else{
                a=0;
            }
    return a;
};
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	90 91 01 01 	lds	r25, 0x0101
 102:	08 95       	ret

00000104 <GPIOPinWrite>:
* Name: void GPIOPinWrite(int Pin,int state)
* Description: Writes the state of the pin as HIGH or LOW
* Arguments: pin and state
* Returns: None
******************************************************************************/
void GPIOPinWrite(Pin,state){
 104:	38 2f       	mov	r19, r24
        if(state==0){
 106:	67 2b       	or	r22, r23
 108:	59 f0       	breq	.+22     	; 0x120 <GPIOPinWrite+0x1c>
            CLR_BIT(PORTD,Pin);
        }
        else{
            SET_BIT(PORTD,Pin);
 10a:	2b b1       	in	r18, 0x0b	; 11
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <GPIOPinWrite+0x12>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	3a 95       	dec	r19
 118:	e2 f7       	brpl	.-8      	; 0x112 <GPIOPinWrite+0xe>
 11a:	28 2b       	or	r18, r24
 11c:	2b b9       	out	0x0b, r18	; 11
 11e:	08 95       	ret
* Arguments: pin and state
* Returns: None
******************************************************************************/
void GPIOPinWrite(Pin,state){
        if(state==0){
            CLR_BIT(PORTD,Pin);
 120:	2b b1       	in	r18, 0x0b	; 11
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <GPIOPinWrite+0x28>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	3a 95       	dec	r19
 12e:	e2 f7       	brpl	.-8      	; 0x128 <GPIOPinWrite+0x24>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	8b b9       	out	0x0b, r24	; 11
 136:	08 95       	ret

00000138 <main>:
typedef struct FLAG_BIT{
  volatile unsigned int FLAG: 1;
}
F;
int main(void)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    GPIOConfig(PD6,OUTPUT);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 48 00 	call	0x90	; 0x90 <GPIOConfig>
    GPIOConfig(PD7,OUTPUT);
 14c:	87 e0       	ldi	r24, 0x07	; 7
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 48 00 	call	0x90	; 0x90 <GPIOConfig>
    GPIOConfig(PD2,INPUT);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 48 00 	call	0x90	; 0x90 <GPIOConfig>
    GPIOConfig(PD3,INPUT);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 48 00 	call	0x90	; 0x90 <GPIOConfig>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 170:	c0 e9       	ldi	r28, 0x90	; 144
 172:	d1 e0       	ldi	r29, 0x01	; 1
    while(1){
        int x=GPIOPinRead(PD2);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 65 00 	call	0xca	; 0xca <GPIOPinRead>
 17c:	8c 01       	movw	r16, r24
        int y=GPIOPinRead(PD3);
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 65 00 	call	0xca	; 0xca <GPIOPinRead>
        if(x==1 && y==1){
 186:	01 30       	cpi	r16, 0x01	; 1
 188:	11 05       	cpc	r17, r1
 18a:	b9 f1       	breq	.+110    	; 0x1fa <main+0xc2>
        }
        else if(x==1 && y==0){
                GPIOPinWrite(PD6,LOW);
                GPIOPinWrite(PD7,HIGH);
        }
        else if(x==0 && y==1){
 18c:	01 2b       	or	r16, r17
 18e:	91 f7       	brne	.-28     	; 0x174 <main+0x3c>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	09 f4       	brne	.+2      	; 0x198 <main+0x60>
 196:	44 c0       	rjmp	.+136    	; 0x220 <main+0xe8>
                GPIOPinWrite(PD6,HIGH);
                GPIOPinWrite(PD7,LOW);
        }
        else if(x==0 && y==0){
 198:	89 2b       	or	r24, r25
 19a:	61 f7       	brne	.-40     	; 0x174 <main+0x3c>
                F F;
                F.FLAG=1;
                while(F.FLAG==1){
                    GPIOPinWrite(PD6,HIGH);
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x76>
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	87 e2       	ldi	r24, 0x27	; 39
 1b8:	20 31       	cpi	r18, 0x10	; 16
 1ba:	38 07       	cpc	r19, r24
 1bc:	b9 f7       	brne	.-18     	; 0x1ac <main+0x74>
                    _delay_ms(1000);
                    GPIOPinWrite(PD6,LOW);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
                    GPIOPinWrite(PD7,HIGH);
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	ce 01       	movw	r24, r28
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0xa4>
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	87 e2       	ldi	r24, 0x27	; 39
 1e6:	20 31       	cpi	r18, 0x10	; 16
 1e8:	38 07       	cpc	r19, r24
 1ea:	b9 f7       	brne	.-18     	; 0x1da <main+0xa2>
                    _delay_ms(1000);
                    GPIOPinWrite(PD7,LOW);
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 1f8:	bd cf       	rjmp	.-134    	; 0x174 <main+0x3c>
    GPIOConfig(PD2,INPUT);
    GPIOConfig(PD3,INPUT);
    while(1){
        int x=GPIOPinRead(PD2);
        int y=GPIOPinRead(PD3);
        if(x==1 && y==1){
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 05       	cpc	r25, r1
 1fe:	e9 f0       	breq	.+58     	; 0x23a <main+0x102>
                GPIOPinWrite(PD6,LOW);
                GPIOPinWrite(PD7,LOW);
        }
        else if(x==1 && y==0){
 200:	89 2b       	or	r24, r25
 202:	09 f0       	breq	.+2      	; 0x206 <main+0xce>
 204:	b7 cf       	rjmp	.-146    	; 0x174 <main+0x3c>
                GPIOPinWrite(PD6,LOW);
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
                GPIOPinWrite(PD7,HIGH);
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 21e:	aa cf       	rjmp	.-172    	; 0x174 <main+0x3c>
        }
        else if(x==0 && y==1){
                GPIOPinWrite(PD6,HIGH);
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
                GPIOPinWrite(PD7,LOW);
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 238:	9d cf       	rjmp	.-198    	; 0x174 <main+0x3c>
    GPIOConfig(PD3,INPUT);
    while(1){
        int x=GPIOPinRead(PD2);
        int y=GPIOPinRead(PD3);
        if(x==1 && y==1){
                GPIOPinWrite(PD6,LOW);
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
                GPIOPinWrite(PD7,LOW);
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	0e 94 82 00 	call	0x104	; 0x104 <GPIOPinWrite>
 252:	90 cf       	rjmp	.-224    	; 0x174 <main+0x3c>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
